{"name":"CheckM","tagline":"Beta check your meta before you wreck your meta","body":"#Overview\r\n\r\nOne of the problems faced in metagenomic assembly is the uncertainty\r\nthat collections of contigs that have been 'binned' into putative\r\ngenomes may be contaminated from another organism or represent an\r\nincomplete genome.  Both are major problems that need to be addressed\r\nbefore inferences about metabolic function can be made by the presence\r\nor absence of genes. CheckM, is a set of tools that can assess the \r\ncontamination and completeness of genome bins using conserved genes found\r\nin a single copy for different taxonomic lineages.  More closely \r\nrelated bacteria and archaea share a higher proportion of their gene\r\ncomplement and therefore estimations of completeness based on these\r\nmarkers will be more accurate than estimates based on gene markers\r\nthat are universal. \r\n\r\n#Installation and Dependancies\r\n\r\nCheckM requires both `biopython` and `simpleHMMER` python packages be\r\nintalled as well as `hmmer3` binaries to be in your `PATH`.  With those\r\ndependancies filling download the git repository to your system and run\r\n```\r\npython setup.py install\r\n```\r\n\r\n#Running Instructions\r\n\r\nCheckM has a single executable `checkM` that has a number of\r\nsubcommands.  There are three subcommands that the use will use\r\nregularly:\r\n* `build` - Run `hmmer` of a marker set against genome(s) of interest\r\n* `qa` - Filter `hmmer` results and output a summary\r\n* `align` - Align identified markers against the HMM model\r\nCheckM can be run in two different ways.  First is for the user to\r\nsupply a `hmmer3` compatible model file of markers.  The second way is\r\nto build a database of markers for all taxonomic lineages and use those\r\nmarkers for accurate estimates of completeness and contamination.  By\r\ndefault CheckM prefers to use the later of the two options.\r\n\r\n\r\n## Setting up the Database\r\n`checkM` has a subcommand called `makeDB` that will take freely\r\navailable genomic data and calculate the conserved markers for each\r\ntaxonomic lineage.  To generate the database you will need to download\r\nthe genomes from IMG and have the Pfam-A domains as well.\r\n\r\nAssuming that you have either made a database you should set the path\r\nwith the environmental variable `CHECKM_DB`.  To check whether this is\r\nalready set, try the following command:\r\n```\r\n$ echo $CHECKM_DB\r\n```\r\nIf you see a file path then the CheckM database is already set up on\r\nyour system.  Otherwise you can setup the database using the following:\r\n```\r\nexport CHECKM_DB=/full/path/to/your/checkm_database\r\n```\r\nTo make that setting perminant add the above line into your `.bashrc` file.\r\n\r\n# Marker Sets\r\nMarker sets are a list of genes/protein domains that are found in all \r\ngenomes for a particular taxonomic rank.  Some marker sets may be \r\nuniversal or be specific to a family or genus.  There are two marker\r\nsets that get used routinely; one from\r\n[phylosift](http://phylosift.wordpress.com) that contains 37 markers\r\nthat are universal, and a list compiled by [Dupont et al.\r\n(2012)](http://www.ncbi.nlm.nih.gov/pubmed/?term=22170421) which\r\ncontains 111 markers found in the majority of Bacteria. A more accurate\r\nview of contamination and completeness of a genome bin may be achieved\r\nby using markers that are targeted to a particular microbial lineage.\r\n\r\n\r\n## Generation of taxon specific marker sets \r\nThe taxon specific marker sets that are used by CheckM were generated\r\nusing the metadata from the IMG 4.0 release.  First all of the complete\r\ngenomes were separated based on the taxonomy string found in the\r\nmetadata.  Next the prevalence of pfam domains for each taxon with at\r\nleast 5 genomes was calculated todetermine which were found in at least\r\n95% of all genomes.  This list of domainswas further segregated based on\r\nwhether that pfam was strictly single copy in each genome or not.\r\n\r\n### Caveats\r\n  * These lists use pfams, which means that a marker may not represent a whole\r\n    gene.  For example there may be two markers, one from the C-terminal and\r\n    the other from the N-terminal domain of the same protein. \r\n  * using a minimum of 5 genomes for a taxon is probably too low.  Be careful\r\n    about how specific a marker set you use.  Think about the total number of\r\n    genomes that the list was constructed against, if in doubt use a Domain\r\n    or phylum level marker set.\r\n  * based solely on the genomes found in IMG 4.0\r\n  * I haven't done any annotations myself, I'm relying solely on the annotation\r\n    pipeline in IMG\r\n  * The taxonomy is also straight from IMG and this may be inaccurate (maybe?),\r\n    which would throw off all of the calculations \r\n\r\n## Using Taxon Specific Marker Sets\r\nTaxon specific marker sets can be invoked by using the `-T` option on\r\nthe command-line.  The taxonomy must be the full taxonomy in Greengenes\r\nformat, for example: `k__Bacteria;p__Proteobacteria`.  Spaces are also\r\nallowed between taxonomic ranks: `k__Bacteria; p__Proteobacteria`. To\r\nget a universal marker set (common to all bacteria and archaea) use the\r\nspecial taxonomy 'universal' as the argument to `-T`\r\nNOTE: Do **not** specify a taxonomy that is lower than the genus level!\r\n\r\n# Workflow\r\nThis is a workflow that I use for determining the completeness and\r\ncontamination of all of my genome bins.  First start by using one of the\r\nuniversal marker sets such as the markers used by phylosift or by\r\nspecifying the taxonomy as 'universal' in the `-T` flag of `checkM.\r\n```\r\ncheckM build -T universal <OUTPUT_FOLDER> genome.fna \r\n    \r\ncheckM qa -T universal <OUTPUT> \r\n```\r\n\r\nFrom the output of the `qa` command you should be able to see which bins\r\nare 'near complete'.  As a general rule I only look genome bins that are\r\nat least 80% complete and less than 10% contamination.  From this point\r\nI make a tree using the concatenation of the  markers and determine the\r\nputative taxonomy of my genome bins. \r\n\r\nFor example lets assume that one of your genome bins is a\r\n*Rhodocyclacae* based on the taxonomy in the tree.  Now we can use the\r\nspecific single copy genes for *Rhodocyclacae* to get more accurate\r\nstatistics on completeness and contamination. (There are 428\r\n*Rhodocyclacae* specific single copy genes, verses the 39 universal)\r\n```\r\ncheckM build -T 'k__Bacteria;p__Proteobacteria;c__Betaproteobacteria;o__Rhodocyclales;f__Rhodocyclaceae' <OUTPUT_FOLDER> genome.fna\r\n\r\ncheckM qa -T 'k__Bacteria;p__Proteobacteria;c__Betaproteobacteria;o__Rhodocyclales;f__Rhodocyclaceae' <OUTPUT_FOLDER> \r\n```\r\nThis output should be a more accurate view of the contamination and completeness of your genome.\r\n\r\n# Manual \r\n## Build\r\n```\r\ncheckM build [-h] [-T TAXONOMY] [-d DATABASE] [-H HMM] [-b BIN_FOLDER]\r\n                    [-x EXTENSION] [-t THREADS] [-p PREFIX] [-v]\r\n                    out_folder [FASTA [FASTA ...]]\r\n\r\nParse binned contigs\r\n\r\npositional arguments:\r\n  out_folder            a place to write output files\r\n  FASTA                 A list of fasta formatted files to be used as the\r\n                        input (default: None)\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -T TAXONOMY, --tax-string TAXONOMY\r\n                        Specify a Greengenes taxonomy string for the lineage\r\n                        of interest (default: None)\r\n  -d DATABASE, --database DATABASE\r\n                        Specify a different path for the marker database. The\r\n                        default is to use the value of the environmental\r\n                        variable \"CHECKM_DB\" (default: None)\r\n  -H HMM, --hmm HMM     hmm used in the search (default: None)\r\n  -b BIN_FOLDER, --bin_folder BIN_FOLDER\r\n                        folder containing bins to check (fasta formatted)\r\n                        (default: None)\r\n  -x EXTENSION, --extension EXTENSION\r\n                        used in conjuntion with -b to specify the extension\r\n                        used on files to be parsed (default: fa)\r\n  -t THREADS, --threads THREADS\r\n                        max number of active threads (default: 1)\r\n  -p PREFIX, --prefix PREFIX\r\n                        prefix used for naming output files (default: )\r\n  -v, --verbose         print more (default: False)\r\n```\r\n\r\n## QA\r\n```\r\ncheckM qa [-h] [-o OUT_FORMAT] [-T TAXONOMY] [-d DATABASE] [-H HMM]\r\n                 [-p PREFIX] [-e E_VALUE] [-l LENGTH] [-f FILE] [-v]\r\n                 out_folder\r\n\r\nDo QA on pre-processed contigs\r\n\r\npositional arguments:\r\n  out_folder            folder specified during build command\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -o OUT_FORMAT, --output-format OUT_FORMAT\r\n                        Change the output format to one of the following: \r\n                        1. Simple Summary showing bin name, counts, completeness\r\n                           and contamination \r\n                        2. List of marker names and their counts\r\n                        3. Matrix of marker counts \r\n                        4. Tabular list of bin name, marker name, contig name\r\n                        5. Tabular list showing contigs that contain more than\r\n                           one copy of the same marker. Format: bin name,\r\n                           contig name, {Marker name, count}... (default: 1)\r\n  -T TAXONOMY, --tax-string TAXONOMY\r\n                        Specify a Greengenes taxonomy string for the lineage\r\n                        of interest (default: None)\r\n  -d DATABASE, --database DATABASE\r\n                        Specify a different path for the marker database. The\r\n                        default is to use the value of the environmental\r\n                        variable \"CHECKM_DB\" (default: None)\r\n  -H HMM, --hmm HMM     hmm used in the search (default: None)\r\n  -p PREFIX, --prefix PREFIX\r\n                        prefix which was used for naming output files\r\n                        (default: )\r\n  -e E_VALUE, --e_value E_VALUE\r\n                        e value cut off (default: 1e-10)\r\n  -l LENGTH, --length LENGTH\r\n                        percent overlap between target and query (default:\r\n                        0.7)\r\n  -f FILE, --file FILE  print results to file (default: STDOUT)\r\n  -v, --verbose         print more (default: False)\r\n```\r\n### Output Format Examples\r\n#### One\r\n#### Two\r\n#### Three\r\n#### Four\r\n#### Five\r\n\r\n## Align\r\n```\r\ncheckM align [-h] [-T TAXONOMY] [-d DATABASE] [-H HMM] [-p PREFIX]\r\n                    [-e E_VALUE] [-l LENGTH] [-v] [-s] [-o OUT_FORMAT] [-c]\r\n                    [-b]\r\n                    out_folder\r\n\r\nCreate alignments of hmms to the matched markers\r\n\r\npositional arguments:\r\n  out_folder            folder specified during build command\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -T TAXONOMY, --tax-string TAXONOMY\r\n                        Specify a Greengenes taxonomy string for the lineage\r\n                        of interest (default: None)\r\n  -d DATABASE, --database DATABASE\r\n                        Specify a different path for the marker database. The\r\n                        default is to use the value of the environmental\r\n                        variable \"CHECKM_DB\" (default: None)\r\n  -H HMM, --hmm HMM     hmm used in the search (default: None)\r\n  -p PREFIX, --prefix PREFIX\r\n                        prefix which was used for naming output files\r\n                        (default: )\r\n  -e E_VALUE, --e_value E_VALUE\r\n                        e value cut off (default: 1e-10)\r\n  -l LENGTH, --length LENGTH\r\n                        percent overlap between target and query (default:\r\n                        0.7)\r\n  -v, --verbose         print more (default: False)\r\n  -s, --separate-files  Output a separate file for each of the hits to a HMM\r\n                        model. (default: False)\r\n  -o OUT_FORMAT, --output-format OUT_FORMAT\r\n                        The output format passed to hmmalign (default:\r\n                        PSIBLAST)\r\n  -c, --include-consensus\r\n                        Include the HMM consensus sequence (generated by\r\n                        hmmemit) in the alignment (default: False)\r\n  -b, --best-hit        Only align the best match to the HMM even if there are\r\n                        multiple matches that pass the threshold (default:\r\n                        False)\r\n```\r\n\r\n## makeDB\r\n```\r\ncheckM makeDB [-h] [-f] [-m] [-i IMG_BASE] [-M METADATA]\r\n                     [--minimum-genome-count MIN_GENOME]\r\n                     [--minimum-taxon-conservation MIN_CONS] [-p PFAM]\r\n                     [-o DATABASE]\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -f, --force           overwite markers or taxons ifthey are already stored\r\n                        in the database (default: False)\r\n  -m, --make_tables     make new tables from scratch (default: False)\r\n  -i IMG_BASE, --input-prefix IMG_BASE\r\n                        The root directory to all the IMG genomes (default:\r\n                        None)\r\n  -M METADATA, --metadata METADATA\r\n                        The IMG metadata file (default: None)\r\n  --minimum-genome-count MIN_GENOME\r\n                        A taxonomic lineage must have at least this number of\r\n                        genomes for a marker set to be made (default: 5)\r\n  --minimum-taxon-conservation MIN_CONS\r\n                        Percent of genomes in taxon that must contain the\r\n                        marker (default: 0.95)\r\n  -p PFAM, --pfam-database PFAM\r\n                        path to Pfam-A file (default: None)\r\n  -o DATABASE, --output-database DATABASE\r\n                        output sqlite3 database name (default: None)\r\n```\r\n\r\n\r\n#Licence and referencing\r\n\r\nProject home page, info on the source tree, documentation, issues and\r\nhow to contribute, see http://github.com/Ecogenomics/CheckM\r\n\r\nThis software is currently unpublished. Please contact me at\r\nm_dot_imelfort_at_uq_dot_edu_dot_au for more information about\r\nreferencing this software.\r\n\r\nCopyright © 2012, 2013 Michael Imelfort, Connor Skennerton. See LICENSE.txt\r\nfor further details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}